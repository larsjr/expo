{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../src/typed-routes/generate.ts"],"names":[],"mappings":";;;;;;AAAA,sDAAyB;AACzB,gDAAwB;AAIxB,4CAAyC;AACzC,0CAA+E;AAE/E,oCAAoC;AACvB,QAAA,SAAS,GAAG,gBAAgB,CAAC;AAC1C,6BAA6B;AAChB,QAAA,IAAI,GAAG,UAAU,CAAC;AAE/B,SAAgB,6BAA6B,CAAC,OAAmB;IAC/D,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IACvC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;IACxC,MAAM,uBAAuB,GAAG,IAAI,GAAG,EAAU,CAAC;IAElD,UAAU,CACR,IAAA,qBAAS,EAAC,OAAO,EAAE;QACjB,iBAAiB,EAAE,IAAI;QACvB,mBAAmB,EAAE,IAAI;KAC1B,CAAC,EACF,YAAY,EACZ,aAAa,EACb,uBAAuB,CACxB,CAAC;IAEF,mFAAmF;IACnF,OAAO,CACL,iBAAE;SACC,YAAY,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,8BAA8B,CAAC,EAAE,OAAO,CAAC;QAC5E,0CAA0C;SACzC,OAAO,CAAC,gCAAgC,EAAE,gCAAgC,CAAC;QAC5E,uBAAuB;SACtB,OAAO,CACN,6BAA6B,EAC7B,uBAAuB,cAAc,CAAC,YAAY,CAAC,GAAG,CACvD;SACA,OAAO,CACN,gDAAgD,EAChD,0CAA0C,cAAc,CAAC,aAAa,CAAC,GAAG,CAC3E;SACA,OAAO,CACN,oCAAoC,EACpC,+BAA+B,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAC1E,CACJ,CAAC;AACJ,CAAC;AAnCD,sEAmCC;AAED,SAAS,UAAU,CACjB,SAA2B,EAC3B,YAAyB,EACzB,aAA0B,EAC1B,uBAAoC;IAEpC,IAAI,CAAC,SAAS;QAAE,OAAO;IAEvB,QAAQ,CAAC,SAAS,EAAE,YAAY,EAAE,aAAa,EAAE,uBAAuB,CAAC,CAAC;IAE1E,KAAK,MAAM,KAAK,IAAI,SAAS,CAAC,QAAQ,EAAE;QACtC,UAAU,CAAC,KAAK,EAAE,YAAY,EAAE,aAAa,EAAE,uBAAuB,CAAC,CAAC;KACzE;AACH,CAAC;AAED,MAAM,cAAc,GAAG,CAAI,GAAW,EAAE,EAAE;IACxC,OAAO,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;AAC9E,CAAC,CAAC;AAEF,SAAS,QAAQ,CACf,KAAuB,EACvB,YAAyB,EACzB,aAA0B,EAC1B,uBAAoC;IAEpC,IAAI,CAAC,KAAK;QAAE,OAAO;IACnB,IAAI,CAAC,IAAA,gCAAqB,EAAC,KAAK,CAAC,UAAU,CAAC;QAAE,OAAO;IAErD,IAAI,SAAS,GAAG,IAAA,oCAAyB,EAAC,KAAK,CAAC,UAAU,CAAC;SACxD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,wBAAwB;SAC3C,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB;IAErD,SAAS,KAAK,GAAG,CAAC,CAAC,oBAAoB;IAEvC,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,uBAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvC,aAAa,CAAC,GAAG,CACf,GAAG,SAAS;aACT,UAAU,CAAC,iBAAS,EAAE,yBAAyB,CAAC;aAChD,UAAU,CAAC,YAAI,EAAE,uBAAuB,CAAC,EAAE,CAC/C,CAAC;KACH;SAAM;QACL,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;KAC7B;AACH,CAAC","sourcesContent":["import fs from 'node:fs';\nimport path from 'path';\n\nimport type { ctx } from '../../_ctx';\nimport { RouteNode } from '../Route';\nimport { getRoutes } from '../getRoutes';\nimport { isTypedRoutesFilename, removeSupportedExtensions } from '../matchers';\n\n// /[...param1]/ - Match [...param1]\nexport const CATCH_ALL = /\\[\\.\\.\\..+?\\]/g;\n// /[param1] - Match [param1]\nexport const SLUG = /\\[.+?\\]/g;\n\nexport function getTypedRoutesDeclarationFile(context: typeof ctx) {\n  const staticRoutes = new Set<string>();\n  const dynamicRoutes = new Set<string>();\n  const dynamicRouteContextKeys = new Set<string>();\n\n  walkRoutes(\n    getRoutes(context, {\n      ignoreEntryPoints: true,\n      ignoreRequireErrors: true,\n    }),\n    staticRoutes,\n    dynamicRoutes,\n    dynamicRouteContextKeys\n  );\n\n  // If the user has expo-router v3+ installed, we can use the types from the package\n  return (\n    fs\n      .readFileSync(path.join(__dirname, '../../types/expo-router.d.ts'), 'utf-8')\n      // Swap from being a namespace to a module\n      .replace('declare namespace ExpoRouter {', `declare module \"expo-router\" {`)\n      // Add the route values\n      .replace(\n        'type StaticRoutes = string;',\n        `type StaticRoutes = ${setToUnionType(staticRoutes)};`\n      )\n      .replace(\n        'type DynamicRoutes<T extends string> = string;',\n        `type DynamicRoutes<T extends string> = ${setToUnionType(dynamicRoutes)};`\n      )\n      .replace(\n        'type DynamicRouteTemplate = never;',\n        `type DynamicRouteTemplate = ${setToUnionType(dynamicRouteContextKeys)};`\n      )\n  );\n}\n\nfunction walkRoutes(\n  routeNode: RouteNode | null,\n  staticRoutes: Set<string>,\n  dynamicRoutes: Set<string>,\n  dynamicRouteContextKeys: Set<string>\n) {\n  if (!routeNode) return;\n\n  addRoute(routeNode, staticRoutes, dynamicRoutes, dynamicRouteContextKeys);\n\n  for (const child of routeNode.children) {\n    walkRoutes(child, staticRoutes, dynamicRoutes, dynamicRouteContextKeys);\n  }\n}\n\nconst setToUnionType = <T>(set: Set<T>) => {\n  return set.size > 0 ? [...set].map((s) => `\\`${s}\\``).join(' | ') : 'never';\n};\n\nfunction addRoute(\n  route: RouteNode | null,\n  staticRoutes: Set<string>,\n  dynamicRoutes: Set<string>,\n  dynamicRouteContextKeys: Set<string>\n) {\n  if (!route) return;\n  if (!isTypedRoutesFilename(route.contextKey)) return;\n\n  let routePath = removeSupportedExtensions(route.contextKey)\n    .replace(/^\\./, '') // Remove the leading ./\n    .replace(/\\/?index$/, ''); // replace /index with /\n\n  routePath ||= '/'; // or default to '/'\n\n  if (route.dynamic) {\n    dynamicRouteContextKeys.add(routePath);\n    dynamicRoutes.add(\n      `${routePath\n        .replaceAll(CATCH_ALL, '${CatchAllRoutePart<T>}')\n        .replaceAll(SLUG, '${SingleRoutePart<T>}')}`\n    );\n  } else {\n    staticRoutes.add(routePath);\n  }\n}\n"]}